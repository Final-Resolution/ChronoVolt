/**
 * @file timer1.h
 * @author mangolu (mangolu81@gmail.com)
 * @brief 
 * @version 1.0.0
 * @date 2019-05-07
 * 
 * @copyright Copyright (c) 2019 mangolu All righits reserved
 * 
 */
/********************************************************************************************************************************************************************************************************/
/************************* 定时器1相关寄存器 *************************/

/************************* TMOD –定时器 0 及 1 模式寄存器 *************************/
// -------------------------------------------------------------------------
// |   7    |   6    |   5    |   4    |   3    |   2    |   1    |   0    |
// |--------|--------|--------|--------|--------|--------|--------|--------|
// |  GATE  |  C/T#  |   M1   |   M0   |  GATE  |  C/T#  |   M1   |   M0   |
// |--------|--------|--------|--------|--------|--------|--------|--------|
// |  R/W   |  R/W   |  R/W   |  R/W   |  R/W   |  R/W   |  R/W   |  R/W   |
// -------------------------------------------------------------------------
// 地址：89H    复位值：0000 0000b
// 
// -------------------------------------------------------------------------
//   Bit  |   Name    |  Description
// -------|-----------|-----------------------------------------------------
//    7   |   GATE    |  定时器1门选择
//        |           |  0 = 无论INT1#的逻辑为何，当TR1为1时，开始计数
//        |           |  1 = 仅当INT1#为1时， TR1同时为1，才开始计数
// -------|-----------|-----------------------------------------------------
//    6   |   C/T#    |  定时器 1 计数器/定时器选择
//        |           |  0 = 定时器1 随内部时钟而递增
//        |           |  1 = 定时器1 随外部引脚T1的下降沿递增
// -------|-----------|-----------------------------------------------------
//    5   |    M1     |  定时器1模式选择 
// -------|-----------|  M1  M0  定时器1模式
//    4   |    M0     |  0  0  模式 0: 13位定时器/计数器
//        |           |  0  1  模式 1: 16位定时器/计数器
//        |           |  1  0  模式 2: 8位定时器/计数器，带自动TH1重载模式
//        |           |  1  1  模式 3: 定时器1停止
// -------|-----------|-----------------------------------------------------
//    3   |   GATE    |  定时器0门选择
//        |           |  0 = 无论INT0#的逻辑为何，当TR1为1时，开始计数
//        |           |  1 = 仅当INT0#为1时， TR1同时为1，才开始计数
// -------|-----------|-----------------------------------------------------
//    2   |   C/T#    |  定时器 0 计数器/定时器选择
//        |           |  0 = 定时器0 随内部时钟而递增
//        |           |  1 = 定时器0 随外部引脚T1的下降沿递增
// -------|-----------|-----------------------------------------------------
//    1   |    M1     |  定时器0模式选择 
// -------|-----------|  M1  M0  定时器0模式
//    0   |    M0     |  0  0  模式 0: 13位定时器/计数器
//        |           |  0  1  模式 1: 16位定时器/计数器
//        |           |  1  0  模式 2: 8位定时器/计数器，带自动TH0重载模式
//        |           |  1  1  模式 3: TL0 作为一个8位定时器/计数器，TH0 作为
//        |           |                一个8位的定时器
// -------------------------------------------------------------------------

/************************* TCON – 定时器 0 和 1 控制位 (可位寻址) *************************/
// -----------------------------------------------------------------------------------
// |   7    |   6    |   5    |   4    |   3         |   2    |   1         |   0    |
// |--------|--------|--------|--------|-------------|--------|-------------|--------|
// |  TF1   |  TR1   |  TF0   |  TR0   |  IE1        |  IT1   |  IE0        |  IT0   |
// |--------|--------|--------|--------|-------------|--------|-------------|--------|
// |  R/W   |  R/W   |  R/W   |  R/W   |  R(level)   |  R/W   |  R(level)   |  R/W   |
// |        |        |        |        |  R/W(edge)  |        |  R/W(edge)  |        |
// -----------------------------------------------------------------------------------
// 地址：88H    复位值：0000 0000b
// 
// --------------------------------------------------------------------------------------------
//   Bit  |   Name    |  Description
// -------|-----------|------------------------------------------------------------------------
//    7   |    TF1    |  定时器 1 溢出标志
//        |           |  在定时器1溢出时该位置1。当程序响应定时器1中断执行相应的中断服务程序时，
//        |           |  该位自动清0。软件也可对其写1或写0
// --------------------------------------------------------------------------------------------
//    6   |    TR1    |  定时器 1 启动控制
//        |           |  0 = 定时器1 中止. 清该位将中止定时器1并且当前计数值将保存到TH1和TL1中
//        |           |  1 = 使能定时器1 
// --------------------------------------------------------------------------------------------
//    5   |    TF0    |  定时器 0 溢出标志
//        |           |  在定时器0溢出时该位置1。当程序响应定时器0中断执行相应的中断服务程序时，
//        |           |  该位自动清0。软件也可对其写1或写0
// --------------------------------------------------------------------------------------------
//    4   |    TR0    |  定时器 0 启动控制
//        |           |  0 = 定时器0 中止. 清该位将中止定时器0并且当前计数值将保存到TH0和TL0中
//        |           |  1 = 使能定时器0
// --------------------------------------------------------------------------------------------
//    3   |    IE1    |  外部中断1边沿标志
//        |           |  当检测到边沿/电平类型时，该标志由硬件置位。
//        |           |  如果 IT1 = 1(下降沿触发), 该位将保持置1直到软件清零或在外部中断1服务程序中
//        |           |  硬件清零 
//        |           |  如果 IT1 = 0(低电平触发), 该标志是INT1#输入信号逻辑电平的反转。软件不可控制
// --------------------------------------------------------------------------------------------
//    2   |    IT1    |  外部中断1类型选择 
//        |           |  该位选择INT1#的中断触发类型是下降沿还是低电平。
//        |           |  0 = INT1#为低电平触发
//        |           |  1 = INT1#为下降沿触发
// --------------------------------------------------------------------------------------------
//    1   |    IE0    |  外部中断0边沿标志
//        |           |  当检测到边沿/电平类型时，该标志由硬件置位。
//        |           |  如果 IT0 = 1(下降沿触发), 该位将保持置1直到软件清零或在外部中断1服务程序中
//        |           |  硬件清零 
//        |           |  如果 IT0 = 0(低电平触发), 该标志是INT0#输入信号逻辑电平的反转。软件不可控制
// --------------------------------------------------------------------------------------------
//    0   |    IT1    |  外部中断0类型选择 
//        |           |  该位选择INT0#的中断触发类型是下降沿还是低电平。
//        |           |  0 = INT0#为低电平触发
//        |           |  1 = INT0#为下降沿触发
// --------------------------------------------------------------------------------------------

/************************* TL1 – 定时器1 低字节 *************************/
// -------------------------------------------------------------------------
// |   7    |   6    |   5    |   4    |   3    |   2    |   1    |   0    |
// |-----------------------------------------------------------------------|
// |                               TL1[7:0]                                |
// |-----------------------------------------------------------------------|
// |                                  R/W                                  |
// -------------------------------------------------------------------------
// 地址：8BH    复位值：0000 0000b
// 
// --------------------------------------------------------------------------
//   Bit  |   Name     |  Description
// -------|------------|-----------------------------------------------------
//   7:0  |  TL1[7:0]  |  定时器1低字节
//        |            |  寄存器TL1是定时器1的16位数值的低字节
// --------------------------------------------------------------------------

/************************* TH1 – 定时器 1 高字节 *************************/
// -------------------------------------------------------------------------
// |   7    |   6    |   5    |   4    |   3    |   2    |   1    |   0    |
// |-----------------------------------------------------------------------|
// |                               TH1[7:0]                                |
// |-----------------------------------------------------------------------|
// |                                  R/W                                  |
// -------------------------------------------------------------------------
// 地址：8DH    复位值：0000 0000b
// 
// --------------------------------------------------------------------------
//   Bit  |   Name     |  Description
// -------|------------|-----------------------------------------------------
//   7:0  |  TH1[7:0]  |  定时器1高字节
//        |            |  寄存器TH1是定时器0的16位数值的高字节
// --------------------------------------------------------------------------

/************************* CKCON – 时钟控制寄存器 *************************/
// ----------------------------------------------------------------------------
// |   7    |   6      |   5    |   4    |   3    |   2    |   1     |   0    |
// |--------|----------|--------|--------|--------|--------|---------|--------|
// |   -    |  PWMCKS  |   -    |  T1M   |  T0M   |   -    |  CLOEN  |   -    |
// |--------|----------|--------|--------|--------|--------|---------|--------|
// |   -    |  R/W     |   -    |  R/W   |  R/W   |   -    |  R/W    |   -    |
// ----------------------------------------------------------------------------
// 地址：8EH    复位值：0000 0000b
// 
// --------------------------------------------------------------------------
//   Bit  |   Name    |  Description
// -------|-----------|------------------------------------------------------
//    6   |  PWMCKS   |  PWM 时钟源选择
//        |           |  0 = PWM时钟源为系统时钟FSYS
//        |           |  1 = PWM时钟源为定时器1的溢出
// --------------------------------------------------------------------------
//    4   |   T1M     |  定时器 1 时钟选择
//        |           |  0 = 定时器 1 的时钟源选择为1/12系统时钟。与标准8051兼容
//        |           |  1 = 定时器 1 的时钟源选择为系统时钟
// --------------------------------------------------------------------------
//    3   |   T0M     |  定时器 0  时钟选择
//        |           |  0 = 定时器 0 的时钟源选择为1/12系统时钟。与标准8051兼容
//        |           |  1 = 定时器 0 的时钟源选择为系统时钟
// --------------------------------------------------------------------------
//    1   |  CLOEN    |  系统时钟输出使能
//        |           |  0 = 禁用系统时钟输出
//        |           |  1 = 使能系统时钟输出，从CLO (P1.1)输出
// --------------------------------------------------------------------------

/************************* P2S – P20 设置及定时器0/1输出使能 *************************/
// ---------------------------------------------------------------------------
// |   7     |   6    |   5    |   4    |   3    |   2    |   1    |   0     |
// |---------|--------|--------|--------|--------|--------|--------|---------|
// |  P20UP  |   -    |   -    |   -    |  T1OE  |  T0OE  |   -    |  P2S.0  |
// |---------|--------|--------|--------|--------|--------|--------|---------|
// |  R/W    |   -    |   -    |   -    |  R/W   |  R/W   |   -    |  R/W    |
// ---------------------------------------------------------------------------
// 地址：B5H    复位值：0000 0000b
// 
// -------------------------------------------------------------------------------------
//   Bit  |   Name    |  Description
// -------|-----------|-----------------------------------------------------------------
//    7   |   P20UP   |  P2.0 上拉使能位
//        |           |  0 = P2.0 禁止上拉
//        |           |  1 = P2.0 使能上拉
//        |           |  仅当RPD (CONFIG0.2)为0时该位有效。如果作为RST#引脚，上拉总是被使能
// -------|-----------|-----------------------------------------------------------------
//    3   |   T1OE    |  定时器 1 输出使能位
//        |           |  0 = 禁止定时器 1 输出
//        |           |  1 = 使能定时器 1 输出从T1引脚
//        |           |  注意：仅当运行在定时器模式时，定时器1输出才会被使能
// -------|-----------|-----------------------------------------------------------------
//    2   |   T0OE    |  定时器 0 输出使能位
//        |           |  0 = 禁止定时器 0  输出
//        |           |  1 = 使能定时器 0  输出从T0引脚
//        |           |  注意：仅当运行在定时器模式时，定时器0输出才会被使能
// -------|-----------|-----------------------------------------------------------------
//    0   |   P2S.0   |  P2.0 施密特触发输入选择
//        |           |  0 = P2.0 TTL电平输入
//        |           |  1 = P2.0 施密特触发输入
// -------------------------------------------------------------------------------------

/********************************************************************************************************************************************************************************************************/
#ifndef _TIMER1_H_
#define _TIMER1_H_

/** 所需头文件开始>>> */

#include "N76E003.h"	/** N76E003寄存器定义头文件 */
#include "sfr_macro.h"	/** N76E003特殊功能寄存器操作宏定义头文件 */
#include "stdint.h"	/** 标准数据类型定义头文件 */
#include "common.h"	/** 通用操作设置定义头文件 */
#include "clock.h"	/** 系统时钟设置及切换函数定义头文件 */

/** 所需头文件结束<<< */

/** 需要自行定义部分开始>>> */



/** 需要自行定义部分结束<<< */



#endif	/** _TIMER1_H_ */