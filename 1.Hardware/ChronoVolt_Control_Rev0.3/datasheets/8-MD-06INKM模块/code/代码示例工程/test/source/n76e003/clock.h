/**
 * @file clock.h
 * @author mangolu (mangolu81@gmail.com)
 * @brief 系统时钟设置及切换函数定义
 * @version 1.0.0
 * @date 2019-04-21
 *
 * @copyright Copyright (c) 2019 mangolu All righits reserved
 *
 */
/********************************************************************************************************************************************************************************************************/
/************************* 系统时钟相关寄存器 *************************/

/************************* CKSWT – 时钟开关 (TA 保护) *************************/
// -------------------------------------------------------------------------------
// |   7    |   6    |    5     |    4     |    3     |   2    |   1    |   0    |
// |--------|--------|----------|----------|----------|-----------------|--------|
// |   -    |   -    |  HIRCST  |  LIRCST  |  ECLKST  |    OSC[1:0]     |   -    |
// |--------|--------|----------|----------|----------|-----------------|--------|
// |   -    |   -    |    R     |    R     |    R     |       W         |   -    |
// -------------------------------------------------------------------------------
// 地址：96H    复位值：0011 0000b
//
// ------------------------------------------------------------------------------
//   Bit     |   Name      |  Description
// ----------|-------------|-----------------------------------------------------
//    5      |  HIRCST     |  16 MHz高速内部振荡器状态
//           |             |  0 = HIRC不稳定或没有开启
//           |             |  1 = HIRC开启并稳定
// ----------|-------------|-----------------------------------------------------
//    4      |  LIRCST     |  10 KHz低速内部振荡器状态
//           |             |  0 = LIRC不稳定或没有开启
//           |             |  1 = LIRC开启并稳定
// ----------|-------------|-----------------------------------------------------
//    3      |  ECLKST     |  外部时钟输入状态
//           |             |  0 = ECLK不稳定或没有开启
//           |             |  1 = ECLK开启并稳定
// ----------|-------------|-----------------------------------------------------
//    2:1    |  OSC[1:0]   |  振荡器选择位
//           |             |  该位是用来选择系统时钟源
//           |             |  00 = 内部16MHz振荡器
//           |             |  01 = 外部时钟控制，通过EXTEN[1:0] (CKEN[7:6]) 设置
//           |             |  10 = 内部10kHz振荡器
//           |             |  11 = 保留位
//           |             |  注意该位段只写，读回来的值可能与当前时钟源不一致
// ------------------------------------------------------------------------------

/************************* CKEN – 时钟使能寄存器(TA 保护) *************************/
// -------------------------------------------------------------------------------
// |   7    |   6    |    5     |    4     |   3    |   2    |   1    |    0     |
// |-----------------|----------|----------|--------|--------|--------|----------|
// |   EXTEN[1:0]    |  HIRCEN  |  LIRCEN  |   -    |   -    |   -    |  CKSWTF  |
// |-----------------|----------|----------|--------|--------|--------|----------|
// |      R/W        |   R/W    |    R/W   |   -    |   -    |   -    |   R/W    |
// -------------------------------------------------------------------------------
// 地址97H    复位值：0011 0000b
//
// -----------------------------------------------------------------------------------------
//   Bit  |    Name      |  Description
// -------|--------------|------------------------------------------------------------------
//   7:6  |  EXTEN[1:0]  |  外部时钟源使能
//        |              |  11 =使能外部时钟 ，通过XIN输入外部时钟信号
//        |              |  其它 = 禁止外部时钟 。P30作为普通I/O使用
// -------|--------------|------------------------------------------------------------------
//    5   |    HIRCEN    |  HIRC16MHz 使能位
//        |              |  0 = 关闭 HIRC
//        |              |  1 = 使能 HIRC
//        |              |  注意一旦设置IAPEN (CHPCON.0)位开启IAP功能，HIRC将会自动使能，硬件也
//        |              |  会设置HIRCEN和HIRCST位。IAPEN被清除后，HIRCEN和EHRCST位会恢复
//        |              |  为原始值
// -------|--------------|------------------------------------------------------------------
//    4   |    LIRCEN    |  LIRC10KHz 使能位
//        |              |  0 = 关闭 LIRC
//        |              |  1 = 使能 LIRC
// -------|--------------|------------------------------------------------------------------
//    0   |    CKSWTF    |  时钟切换错误标志位
//        |              |  0 = 先前的系统时钟源切换成功
//        |              |  1 = 用户试图将先前的系统时钟源切换到没有开启或是不稳定的时钟源。如果待
//        |              |      切换的时钟不稳定该位将一直保持为1，直到时钟源稳定并切换成功为止。
// -----------------------------------------------------------------------------------------

/************************* CKDIV – 时钟除频 *************************/
// -------------------------------------------------------------------------
// |   7    |   6    |   5    |   4    |   3    |   2    |   1    |   0    |
// |-----------------------------------------------------------------------|
// |                             CKDIV[7:0]                                |
// |-----------------------------------------------------------------------|
// |                                  R/W                                  |
// -------------------------------------------------------------------------
// 地址：95H    复位值：0000 0000b
//
// ----------------------------------------------------------------------------
//   Bit  |   Name       |  Description
// -------|--------------|-----------------------------------------------------
//   7:0  |  CKDIV[7:0]  |  时钟除频
//        |              |  下面是系统频率FSYS计算公式
//        |              |  当 CKDIV = 00H时，FSYS = FOSC
//        |              |  当 CKDIV = 01H - FFH时，FSYS = FOSC / (2 * CKDIV)
// ----------------------------------------------------------------------------

/************************* CKCON – 时钟控制寄存器 *************************/
// ----------------------------------------------------------------------------
// |   7    |   6      |   5    |   4    |   3    |   2    |   1     |   0    |
// |--------|----------|--------|--------|--------|--------|---------|--------|
// |   -    |  PWMCKS  |   -    |  T1M   |  T0M   |   -    |  CLOEN  |   -    |
// |--------|----------|--------|--------|--------|--------|---------|--------|
// |   -    |  R/W     |   -    |  R/W   |  R/W   |   -    |  R/W    |   -    |
// ----------------------------------------------------------------------------
// 地址：8EH    复位值：0000 0000b
//
// --------------------------------------------------------------------------
//   Bit  |   Name    |  Description
// -------|-----------|------------------------------------------------------
//    6   |  PWMCKS   |  PWM 时钟源选择
//        |           |  0 = PWM时钟源为系统时钟FSYS
//        |           |  1 = PWM时钟源为定时器1的溢出
// --------------------------------------------------------------------------
//    4   |   T1M     |  定时器 1 时钟选择
//        |           |  0 = 定时器 1 的时钟源选择为1/12系统时钟。与标准8051兼容
//        |           |  1 = 定时器 1 的时钟源选择为系统时钟
// --------------------------------------------------------------------------
//    3   |   T0M     |  定时器 0  时钟选择
//        |           |  0 = 定时器 0 的时钟源选择为1/12系统时钟。与标准8051兼容
//        |           |  1 = 定时器 0 的时钟源选择为系统时钟
// --------------------------------------------------------------------------
//    1   |  CLOEN    |  系统时钟输出使能
//        |           |  0 = 禁用系统时钟输出
//        |           |  1 = 使能系统时钟输出，从CLO (P1.1)输出
// --------------------------------------------------------------------------

/********************************************************************************************************************************************************************************************************/
#ifndef _CLOCK_H_
#define _CLOCK_H_

/** 所需头文件开始>>> */

#include "N76E003.h"
#include "../common/common.h"

/** 所需头文件结束<<< */

/** 需要自行定义部分开始>>> */

/** 需要自行定义部分结束<<< */

/**
 * @brief 时钟源定义枚举
 * 
 */
typedef enum {
	External_OSC,  /** 最高16MHz外部时钟输入 */
	High_Speed_Internal_RC, /** 内部16MHz RC振荡器 */
	Low_Speed_Internal_RC, /** 内部10KHz RC振荡器 */
} SYSTEM_CLOCK;

/**
 * @brief 系统时钟选择设置函数
 * 内部16MHz RC振荡器，上电默认开启，是默认的系统时钟源
 * 内部10KHz RC振荡器，上电默认开启
 *
 * @param clock 系统时钟类型
 */
void System_Clock_Select(SYSTEM_CLOCK clock);

/**
 * @brief 系统时钟分频
 * 系统时钟分频除了不能在中断中改变，可以在任何时刻改变。
 * 
 * @param uint8_t u8Div，系统时钟分频值，为0x00~0xFF大小的数值
 * 当u8Div = 0x00时，FSYS = FOSC，即不分频。
 * 当u8Div = 0x01~0xFF时，FSYS = FOSC / (2 * u8Div)，最大为 2* 0xFF即510分频值。
 */
void System_Clock_Divid(uint8_t u8Div);

/**
 * @brief 从P1.1(Pin14)输出系统时钟
 *
 * @param uint8_t u8On_Off，从P1.1输出或关闭输出系统时钟。
 * ON(即1)为输出，OFF(即0)为不输出。
 */
void System_Clock_Output(uint8_t u8On_Off);

/**
 * @brief 修改高速内部RC振荡器频率为16.6MHz
 * 使串口通讯波特率误差率更低
 *
 */
void MODIFY_HIRC_166(void);

#endif	/** _CLOCK_H_ */